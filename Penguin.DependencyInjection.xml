<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.DependencyInjection</name>
    </assembly>
    <members>
        <member name="T:Penguin.DependencyInjection.Attributes.DependencyAttribute">
            <summary>
            Marks a property as being injectable. Property remains null if not registered
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Attributes.DependencyAttribute.Default">
            <summary>
            Can be used to specify a default registration type if the property is not registered when resolved
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Attributes.DependencyAttribute.FindService">
            <summary>
            I dont actually know what the intent of this was so dont use it
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Attributes.DependencyAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance of the attribute instructing the injector to use a specified type if this property type is unregistered
            </summary>
            <param name="defaultType">The type to resolve this property to if no registrations are found</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Attributes.DependencyAttribute.#ctor(System.Boolean)">
            <summary>
            Creates a default instance of this attribute
            </summary>
            <param name="findService">Dont set this because I dont know what it does</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Attributes.ServiceProviderAttribute">
            <summary>
            Allows attributing a class so that the DI automatically registers it to itself with the given Service Provider type
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Attributes.ServiceProviderAttribute.ServiceProvider">
            <summary>
            The type of the service provider that should be used to resolve this class
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Attributes.ServiceProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructs a new instance of this attribute
            </summary>
            <param name="serviceProvider">The type of the service provider that should be used to resolve this class</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Engine">
            <summary>
            The core dependency engine. Instantiation needed to support Scoped service providers
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Engine.DetectCircularResolution">
            <summary>
            If true, maintains a resolution stack to attempt to prevent a stack overflow. Likely incurs a performance penalty. Useful for debugging. Default false.
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.#cctor">
            <summary>
            Whitelists a list of assemblies through the Reflection TypeFactory and then grabs all types and attempts to register any types that are relevant to the
            engine
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.#ctor">
            <summary>
            Creates an instance of the engine and copies static providers to the instance provider pool
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.GetRegistrations">
            <summary>
            Creates a clone of the current registrations and returns it.
            </summary>
            <returns>A clone of the current registrations</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.IsRegistered(System.Type)">
            <summary>
            Checks to see if a type is registered as an injection target
            </summary>
            <param name="t">The type to check for</param>
            <returns>Whether or not the type is registered as an injection target</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.IsRegistered(System.Type,Penguin.DependencyInjection.Objects.SynchronizedCollection{Penguin.DependencyInjection.Registration}@)">
            <summary>
            Try-Gets a list of registrations from the registration collection
            </summary>
            <param name="t">The type to check for</param>
            <param name="outT">If found, the return collection</param>
            <returns>Whether or not the type is registered as an injection target</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.ResolveProperties``1(``0,Penguin.DependencyInjection.Objects.ResolutionPackage)">
            <summary>
            Resolves child properties of an object through the engine
            </summary>
            <typeparam name="T">Any class</typeparam>
            <param name="o">The object to resolve the properties of</param>
            <param name="resolutionPackage">Information to be used when resolving types</param>
            <returns>The passed in object with resolved properties (just in case)</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Register(Penguin.DependencyInjection.ServiceProviders.AbstractServiceProvider)">
            <summary>
            Registers a service provider instance to be used for object resolution
            </summary>
            <param name="serviceProvider">The service provider to register</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.GenerateRegistration(System.Type,System.Type,System.Func{System.IServiceProvider,System.Object},System.Type)">
            <summary>
            Creates a temporary registration instance to use in building resolution lists dynamically
            </summary>
            <param name="y">If requested</param>
            <param name="x">The Created</param>
            <param name="injectionFactory">using method</param>
            <param name="serviceProvider">With this scope</param>
            <returns></returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.IsRegistered``1">
            <summary>
            Checks if theres an existing registration for this type
            </summary>
            <typeparam name="T">The type to check for</typeparam>
            <returns> if theres an existing registration for this type</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Register(System.Type,System.Type,System.Func{System.IServiceProvider,System.Object},System.Type)">
            <summary>
            Creates a permanent type mapping for the registration and adds it to the cache
            </summary>
            <param name="y">If requested</param>
            <param name="x">The Created</param>
            <param name="injectionFactory">using method</param>
            <param name="lifetimeManager">With this scope</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Register``2(System.Type)">
            <summary>
            Registers a type using the specified lifetime manager
            </summary>
            <typeparam name="Y">The type to register</typeparam>
            <typeparam name="X">The type to return</typeparam>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Register(System.Type,System.Type,System.Type)">
            <summary>
            Registers a type using the specified lifetime manager
            </summary>
            <param name="y">The type to register</param>
            <param name="x">The type to return</param>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Register``1(System.Func{System.IServiceProvider,System.Object},System.Type)">
            <summary>
            Registers a type with a func to provide an instance later
            </summary>
            <typeparam name="Y">The type to register</typeparam>
            <param name="injectionFactory">The func to create an instance of the object</param>
            <param name="lifetimeManager">The type of ServiceProvider that should store the creaete instance</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Register(System.Type,System.Func{System.IServiceProvider,System.Object},System.Type)">
            <summary>
            Registers a type with a func to provide an instance later
            </summary>
            <param name="y">The type to register</param>
            <param name="injectionFactory">The func to create an instance of the object</param>
            <param name="lifetimeManager">The type of ServiceProvider that should store the creaete instance</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.RegisterAllBaseTypes(System.Type,System.Type,System.Type)">
            <summary>
            Registers all types between the two given types (in a heiararchy) to resolve to the first type (inclusive)
            </summary>
            <param name="Base">The most derived type in the stack</param>
            <param name="Parent">The least derived type in the stack</param>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.RegisterAllBaseTypes``2(System.Type)">
            <summary>
            Registers all types between the two given types (in a heiararchy) to resolve to the first type (inclusive)
            </summary>
            <typeparam name="Base">The most derived type in the stack</typeparam>
            <typeparam name="Parent">The least derived type in the stack</typeparam>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.RegisterInstance(System.Type,System.Object,System.Type)">
            <summary>
            Registers a concrete object instance to the given provider
            </summary>
            <param name="y">The tyoe to register</param>
            <param name="o">The object instance to register</param>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.RegisterInstance``1(System.Object,System.Type)">
            <summary>
            Registers a concrete object instance to the given provider
            </summary>
            <typeparam name="Y">The tyoe to register</typeparam>
            <param name="o">The object instance to register</param>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Unregister(System.Type)">
            <summary>
            Removes any registrations for the given type
            </summary>
            <param name="t">The type to remove</param>
            <returns>Whether or not the unregistration was a success</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Unregister``1">
            <summary>
            Registers a concrete object instance to the given provider
            </summary>
            <typeparam name="T">The type to remove</typeparam>
            <returns>Whether or not the unregistration was a success</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.RegisterInstanceAllBaseTypes(System.Type,System.Object,System.Type)">
            <summary>
            Registers all parent types of the given object to the specified instance
            </summary>
            <param name="Base">The base type to use as a cut off for the registrations (so we dont register something like "object)</param>
            <param name="Instance">The object instance to register</param>
            <param name="lifetimeManager">The type of the ServiceProvider to use for resolution</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.GetService(System.Type)">
            <summary>
            Attempts to resolve a service using registrations
            </summary>
            <param name="serviceType">The type of class being requested</param>
            <returns>The registered or constructed instance of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Resolve(System.Type)">
            <summary>
            Attempts to resolve a service using registrations
            </summary>
            <param name="t">The type of class being requested</param>
            <returns>The registered or constructed instance of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Resolve``1">
            <summary>
            Attempts to resolve a service using registrations
            </summary>
            <typeparam name="T">The type of class being requested</typeparam>
            <returns>The registered or constructed instance of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.ResolveMany(System.Type)">
            <summary>
            Attempts to resolve an IEnumerable of all registered instances of the type requested
            </summary>
            <param name="t">The type of class being requested</param>
            <returns>The registered or constructed instances of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.ResolveProperties(System.Object)">
            <summary>
            Attempts to resolve any properties on the given type, that have the Dependency attribute
            </summary>
            <param name="o">The object to resolve the properties of</param>
            <returns>The same object</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.ResolveSingle(System.Type)">
            <summary>
            Returns a single instance of the type based on the LAST registration
            </summary>
            <param name="t">The type of class being requested</param>
            <returns>The registered or constructed instances of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.ResolveSingle(System.Type,Penguin.DependencyInjection.Objects.ResolutionPackage,System.Boolean)">
            <summary>
            Returns a single instance of the type based on the LAST registration
            </summary>
            <param name="t">The type to return</param>
            <param name="resolutionPackage">A resolution package containing any providers</param>
            <param name="optional">Dont throw an error if its null</param>
            <returns>An instance of the requested type, if registered</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.Engine.Static">
            <summary>
            Methods that allow for type resolutions using static providers, to remove need to instantiate engine if there are no scoped providers
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Static.GetService``1">
            <summary>
            Attempts to resolve a service using registrations
            </summary>
            <typeparam name="T">The type of class being requested</typeparam>
            <returns>The registered or constructed instance of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Static.GetService(System.Type)">
            <summary>
            Attempts to resolve a service using registrations
            </summary>
            <param name="serviceType">The type of class being requested</param>
            <returns>The registered or constructed instance of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Static.ResolveMany(System.Type)">
            <summary>
            Attempts to resolve an IEnumerable of all registered instances of the type requested
            </summary>
            <param name="t">The type of class being requested</param>
            <returns>The registered or constructed instances of the class, or null, or error</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Engine.Static.ResolveSingle(System.Type)">
            <summary>
            Returns a single instance of the type based on the LAST registration
            </summary>
            <param name="t">The type of class being requested</param>
            <returns>The registered or constructed instances of the class, or null, or error</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.Exceptions.FailingConstructor">
            <summary>
            Contains information about an individual constructor that was not able to be injected, and why
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Exceptions.FailingConstructor.Constructor">
            <summary>
            The constructor info for this constructor instance
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Exceptions.FailingConstructor.MissingParameters">
            <summary>
            The constructor parameters that were not found registered in the dependency injector
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.Exceptions.MissingInjectableConstructorException">
            <summary>
            Exception that contains information needed to understand why an object was not able to be constructed
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Exceptions.MissingInjectableConstructorException.FailedConstructors">
            <summary>
            Information for each constructor that was tried, and what it was missing
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Exceptions.MissingInjectableConstructorException.FailingType">
            <summary>
            The type that was attempted to be constructed unsuccessfully
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Exceptions.MissingInjectableConstructorException.Message">
            <summary>
            A string message containing all of the information found in concrete form in this exception (for logging)
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Extensions.IServiceProviderExtensions.GetService``1(System.IServiceProvider)">
            <summary>
            Returns a service from a service provider by casting it to a requested type
            </summary>
            <typeparam name="T">Type type to request</typeparam>
            <param name="provider">The service provider to use as a source</param>
            <returns>Any resolved object casted to the requested type</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.LazyBase`1">
            <summary>
            A base class for the various lazy initializers
            </summary>
            <typeparam name="T">Any type to return</typeparam>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyBase`1.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a new instance of this base class
            </summary>
            <param name="serviceProvider">The service provider to use as a data source</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.LazyDependency`1">
            <summary>
            Attempts to allow access to a dependency that isn't injected until its accessed
            </summary>
            <typeparam name="T">The type of the dependency to return</typeparam>
        </member>
        <member name="P:Penguin.DependencyInjection.Objects.LazyDependency`1.Value">
            <summary>
            Returns a constructed instance of the dependency
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyDependency`1.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a new instance of this object
            </summary>
            <param name="serviceProvider">The service provider to use when returning the dependency</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.LazyDictionary`2">
            <summary>
            Attempts to return a dictionary without constructing the list until it is accessed
            </summary>
            <typeparam name="TKey">The Key Type of the dictionary</typeparam>
            <typeparam name="TValue">The Value Type of the dictionary</typeparam>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyDictionary`2.#ctor(System.Func{`0,`1})">
            <summary>
            Constructs a new instance of this object
            </summary>
            <param name="loadingMethod">A func that returns a constructed instance of the underlying type</param>
        </member>
        <member name="P:Penguin.DependencyInjection.Objects.LazyDictionary`2.Item(`0)">
            <summary>
            Returns a value from the dictionary based on the key
            </summary>
            <param name="key">The key to check for</param>
            <returns>The value associated with the key</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyDictionary`2.GetValue(`0)">
            <summary>
            Returns a value from the dictionary based on the key
            </summary>
            <param name="key">The key to check for</param>
            <returns>The value associated with the key</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.LazyIEnumerable`1">
            <summary>
            Attempts to return an IEnumerable of objects without constructing the list until it is accessed
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyIEnumerable`1.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Constructs a new instance of this object
            </summary>
            <param name="loadingMethod">A Func that should be called on access to return an IEnumerable of the provided type</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.LazyList`1">
            <summary>
            Attempts to return a list of objects without constructing the list until it is accessed
            </summary>
            <typeparam name="T">Any type</typeparam>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyList`1.#ctor(System.Func{System.Collections.Generic.List{`0}})">
            <summary>
            Constructs a new instance of this object
            </summary>
            <param name="loadingMethod">A Func that should be called on access to return a list of the provided type</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyList`1.GetEnumerator">
            <summary>
            Returns the underlying enumerator for the list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.LazyObject`1">
            <summary>
            Attempts to provide an object that created until it is accessed
            </summary>
            <typeparam name="T">The type of object to provide when accessed</typeparam>
        </member>
        <member name="P:Penguin.DependencyInjection.Objects.LazyObject`1.Value">
            <summary>
            Returns an object from the provided factory/provider
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyObject`1.#ctor(System.Func{`0})">
            <summary>
            Constructs a new instance of this object using the Func as the data source
            </summary>
            <param name="loadingMethod">A func that returns an object of the requested type</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.LazyObject`1.#ctor(System.IServiceProvider)">
            <summary>
            Constructs a new instance of this object using a service provider as the data source
            </summary>
            <param name="serviceProvider">A service provider configured to return an instance of the requested object</param>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.ResolutionPackage">
            <summary>
            Used to hold the required objects for resolving through the static methods
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Objects.ResolutionPackage.RegistrationStack">
            <summary>
            A registration stack optionally used to detect circular references
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Objects.ResolutionPackage.ServiceProviders">
            <summary>
            The collection of service providers to be used
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.ResolutionPackage.#ctor(System.Collections.Generic.IDictionary{System.Type,Penguin.DependencyInjection.ServiceProviders.AbstractServiceProvider})">
            <summary>
            Constructs a new instance of the resolution package
            </summary>
            <param name="serviceProviders"></param>
        </member>
        <member name="T:Penguin.DependencyInjection.Objects.SynchronizedCollection`1">
            <summary>
            A Concurrent List object
            </summary>
            <typeparam name="T">Any collection type</typeparam>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.SynchronizedCollection`1.#ctor">
            <summary>
            Constucts a new instance of this class
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.SynchronizedCollection`1.Add(`0)">
            <summary>
            Adds a new object to this collection
            </summary>
            <param name="o">The object to add</param>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.SynchronizedCollection`1.GetEnumerator">
            <summary>
            Returns a thread safe enumerator
            </summary>
            <returns>A thread safe enumerator</returns>
        </member>
        <member name="M:Penguin.DependencyInjection.Objects.SynchronizedCollection`1.Remove(`0)">
            <summary>
            Removes an object from this list
            </summary>
            <param name="o">The object to remove</param>
        </member>
        <member name="P:Penguin.DependencyInjection.Objects.SynchronizedCollection`1._backing">
            <summary>
            The backing object for this collection
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.Registration">
            <summary>
            Defines a single registration of types for the Dependency Engine
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Registration.InjectionFactory">
            <summary>
            A Func to be used when creating the instance
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Registration.RegisteredType">
            <summary>
            The "Key" type defining what request type this registration applies to
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Registration.ServiceProvider">
            <summary>
            The Type of the service provider that should handle/store instances of this registrations object
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.Registration.ToInstantiate">
            <summary>
            The "Value" type defining what should be returned when the "Key" (RegisteredType) is requested
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceProviders.AbstractServiceProvider">
            <summary>
            Root service provider class for classes that act as object containers for the dependency injector
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.AbstractServiceProvider.Add(System.Type,System.Object)">
            <summary>
            Adds an instance of the type to this container, using the specified type as the key
            </summary>
            <param name="t">The type you will be resolving</param>
            <param name="o">The object to resolve to</param>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.AbstractServiceProvider.Add(System.Object)">
            <summary>
            Adds an instance of the type to this container using the objects type as a key
            </summary>
            <param name="o">The object to resolve to</param>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.AbstractServiceProvider.GetService(System.Type)">
            <summary>
            Used to return any objects matching the specified type, from the container
            </summary>
            <param name="t">The type to use as the Key</param>
            <returns>A List of objects (as an object) that match the Key. Cast the list to access the contents</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceProviders.ScopedServiceProvider">
            <summary>
            A service provider that releases all of its instances when its disposed, for DI that should only apply within a scope (ex web request)
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.ScopedServiceProvider.Add(System.Type,System.Object)">
            <summary>
            Adds a new object instance to the provided type registrations list of instances
            </summary>
            <param name="t">The type registration to hold the instance</param>
            <param name="o">The object instance to add</param>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.ScopedServiceProvider.GetService(System.Type)">
            <summary>
            Gets a LIST of object instances by the registered type
            </summary>
            <param name="t">The registration type for the object to retrieve</param>
            <returns>A LIST of object instances that are part of the type registration</returns>
        </member>
        <member name="P:Penguin.DependencyInjection.ServiceProviders.ScopedServiceProvider.Instances">
            <summary>
            A list of all the objects that were constructed in the scope containing this service provider (set to be scoped)
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceProviders.SingletonServiceProvider">
            <summary>
            A STATIC service provider that returns the same object instance across all DI instances
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.ServiceProviders.SingletonServiceProvider.Instances">
            <summary>
            A static list of the current instances held by this provider
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.SingletonServiceProvider.Add(System.Type,System.Object)">
            <summary>
            Add a new instance to the provider
            </summary>
            <param name="t">The type that maps to this instance</param>
            <param name="o">The actual instance</param>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.SingletonServiceProvider.GetService(System.Type)">
            <summary>
            Gets an object by the registered type
            </summary>
            <param name="t">The type of registration to return</param>
            <returns>The object registered to that type</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceProviders.StaticServiceProvider">
            <summary>
            A base class for any service providers that should be registered as static instances with the dependency injector,
            since it makes no sense to force registrations at construction for providers backed by static fields.
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.StaticServiceProvider.Register(Penguin.DependencyInjection.Engine)">
            <summary>
            Registeres this instance with the dependency injector
            </summary>
            <param name="engine">The dependency injector to register</param>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceProviders.TransientServiceProvider">
            <summary>
            This class causes a new instance of the object to be created every time it is requested
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.TransientServiceProvider.Add(System.Type,System.Object)">
            <summary>
            Not used
            </summary>
            <param name="t">Not used</param>
            <param name="o">Not used</param>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceProviders.TransientServiceProvider.GetService(System.Type)">
            <summary>
            Not used
            </summary>
            <param name="t">Not used</param>
            <returns>Not used</returns>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceScopes.ScopedServiceScope">
            <summary>
            Represents a single scope for DI injection
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.ServiceScopes.ScopedServiceScope.RequestProvider">
            <summary>
            The Scoped Service Provider that will be handling this Scope
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.ServiceScopes.ScopedServiceScope.ServiceProvider">
            <summary>
            The Dependency Engine that will be handling this scope
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceScopes.ScopedServiceScope.#ctor">
            <summary>
            Constructs a new instance of this scope, and sets the internal DI to a new instance with a registered scope provider
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceScopes.ScopedServiceScope.Dispose">
            <summary>
            This does nothing because it should all be handled by GC
            </summary>
        </member>
        <member name="T:Penguin.DependencyInjection.ServiceScopes.StaticServiceScope">
            <summary>
            A service scope for resolving dependencies in a static manner
            </summary>
        </member>
        <member name="P:Penguin.DependencyInjection.ServiceScopes.StaticServiceScope.ServiceProvider">
            <summary>
            Unused
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceScopes.StaticServiceScope.#ctor">
            <summary>
            Creates a new instance of this service scope.
            </summary>
        </member>
        <member name="M:Penguin.DependencyInjection.ServiceScopes.StaticServiceScope.Dispose">
            <summary>
            Unused
            </summary>
        </member>
    </members>
</doc>
